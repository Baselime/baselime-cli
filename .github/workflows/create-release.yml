# Build binaries for macOS and Linux, publish Node.js packages, create release
name: build-publish-release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Package
        run: |
          npm ci
          npm run build
          npm run package:macos

      - name: Create tarball
        run: |
          mv bin/macos/baselime baselime
          tar -cvzf baselime-darwin-x64-"$RELEASE_VERSION".tar.gz baselime

      - name: Upload tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: bin-macos
          path: baselime-darwin-x64-${{ env.RELEASE_VERSION }}.tar.gz

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Package
        run: |
          npm ci
          npm run build
          npm run package:linux

      - name: Create tarball
        run: |
          mv bin/linux/baselime baselime
          tar -cvzf baselime-linux-x64-"$RELEASE_VERSION".tar.gz baselime

      - name: Upload tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: bin-linux
          path: baselime-linux-x64-${{ env.RELEASE_VERSION }}.tar.gz

  publish-node-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Build and publish to npm registry
        continue-on-error: true
        run: |
          npm ci
          npm run build
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: "@baselime"

      - run: echo "registry=https://npm.pkg.github.com/@baselime" >> .npmrc

      - name: Publish to GitHub registry
        continue-on-error: true
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [build-macos, build-linux, publish-node-packages]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set current date
        run: |
          echo "RELEASE_DATE=$(date +"%d %B %Y")" >> $GITHUB_ENV

      - name: Download macos tarball
        uses: actions/download-artifact@v2
        with:
          name: bin-macos

      - name: Download linux tarball
        uses: actions/download-artifact@v2
        with:
          name: bin-linux

      - name: Compute checksums
        run: |
          echo "## ${{ env.RELEASE_VERSION }} (${{ env.RELEASE_DATE }})" >> checksums.md
          sha256sum baselime-darwin-x64-${{ env.RELEASE_VERSION }}.tar.gz >> checksums.md
          sha256sum baselime-linux-x64-${{ env.RELEASE_VERSION }}.tar.gz >> checksums.md

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          body_path: checksums.md
          files: |
            LICENSE
            baselime-darwin-x64-${{ env.RELEASE_VERSION }}.tar.gz
            baselime-linux-x64-${{ env.RELEASE_VERSION }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker-image:
    needs: [create-release]
    runs-on: ubuntu-latest
      steps:
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v4
          with:
            images: |
              ${{ secrets.DOCKER_ORG }}/${{ secrets.DOCKER_REPOSITORY }}
            tags: |
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}
        - name: Build and push Docker image
          uses: docker/build-push-action@v3
          with:
            context: .
            platforms: linux/amd64
            tags: ${{ steps.meta.outputs.tags }}
            push: true

